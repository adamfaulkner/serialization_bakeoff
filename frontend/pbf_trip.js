// code generated by pbf v4.0.1
// I modified it some because that's the way this thing works?

export const RideableType = {
	unknown_rideable_type: 0,
	electric_bike: 1,
	classic_bike: 2,
};

export const MemberCasual = {
	unknown_member_casual: 0,
	member: 1,
	casual: 2,
};

export function readTrip(pbf, end) {
	return pbf.readFields(
		readTripField,
		{
			rideId: "",
			rideableType: 0,
			startedAtMs: 0,
			endedAtMs: 0,
			startStationName: "",
			startStationId: "",
			endStationName: "",
			endStationId: "",
			startLat: 0,
			startLng: 0,
			endLat: 0,
			endLng: 0,
			memberCasual: 0,
		},
		end,
	);
}
function readTripField(tag, obj, pbf) {
	if (tag === 1) obj.rideId = pbf.readString();
	else if (tag === 2) obj.rideableType = pbf.readVarint();
	else if (tag === 3) obj.startedAtMs = pbf.readVarint(true);
	else if (tag === 4) obj.endedAtMs = pbf.readVarint(true);
	else if (tag === 5) obj.startStationName = pbf.readString();
	else if (tag === 6) obj.startStationId = pbf.readString();
	else if (tag === 7) obj.endStationName = pbf.readString();
	else if (tag === 8) obj.endStationId = pbf.readString();
	else if (tag === 9) obj.startLat = pbf.readDouble();
	else if (tag === 10) obj.startLng = pbf.readDouble();
	else if (tag === 11) obj.endLat = pbf.readDouble();
	else if (tag === 12) obj.endLng = pbf.readDouble();
	else if (tag === 13) obj.memberCasual = pbf.readVarint();
}
export function writeTrip(obj, pbf) {
	if (obj.rideId) pbf.writeStringField(1, obj.rideId);
	if (obj.rideableType) pbf.writeVarintField(2, obj.rideableType);
	if (obj.startedAtMs) pbf.writeVarintField(3, obj.startedAtMs);
	if (obj.endedAtMs) pbf.writeVarintField(4, obj.endedAtMs);
	if (obj.startStationName) pbf.writeStringField(5, obj.startStationName);
	if (obj.startStationId) pbf.writeStringField(6, obj.startStationId);
	if (obj.endStationName) pbf.writeStringField(7, obj.endStationName);
	if (obj.endStationId) pbf.writeStringField(8, obj.endStationId);
	if (obj.startLat) pbf.writeDoubleField(9, obj.startLat);
	if (obj.startLng) pbf.writeDoubleField(10, obj.startLng);
	if (obj.endLat) pbf.writeDoubleField(11, obj.endLat);
	if (obj.endLng) pbf.writeDoubleField(12, obj.endLng);
	if (obj.memberCasual) pbf.writeVarintField(13, obj.memberCasual);
}

export function readServerResponseAll(pbf, end) {
	return pbf.readFields(readServerResponseAllField, { trips: [] }, end);
}
function readServerResponseAllField(tag, obj, pbf) {
	if (tag === 1) obj.trips.push(readTrip(pbf, pbf.readVarint() + pbf.pos));
}
export function writeServerResponseAll(obj, pbf) {
	if (obj.trips) for (const item of obj.trips) pbf.writeMessage(1, writeTrip, item);
}
