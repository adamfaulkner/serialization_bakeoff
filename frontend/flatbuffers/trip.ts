// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

import { MemberCasual } from "../flatbuffers/member-casual.js";
import { RideableType } from "../flatbuffers/rideable-type.js";

export class Trip {
  bb: flatbuffers.ByteBuffer | null = null;
  bb_pos = 0;
  __init(i: number, bb: flatbuffers.ByteBuffer): Trip {
    this.bb_pos = i;
    this.bb = bb;
    return this;
  }

  static getRootAsTrip(bb: flatbuffers.ByteBuffer, obj?: Trip): Trip {
    return (obj || new Trip()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  static getSizePrefixedRootAsTrip(bb: flatbuffers.ByteBuffer, obj?: Trip): Trip {
    bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
    return (obj || new Trip()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
  }

  rideId(): string | null;
  rideId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  rideId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 4);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  rideableType(): RideableType {
    const offset = this.bb!.__offset(this.bb_pos, 6);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : RideableType.UNKNOWN_RIDEABLE_TYPE;
  }

  startedAtMs(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 8);
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
  }

  endedAtMs(): bigint {
    const offset = this.bb!.__offset(this.bb_pos, 10);
    return offset ? this.bb!.readInt64(this.bb_pos + offset) : BigInt("0");
  }

  startStationName(): string | null;
  startStationName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  startStationName(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 12);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  startStationId(): string | null;
  startStationId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  startStationId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 14);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  endStationName(): string | null;
  endStationName(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  endStationName(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 16);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  endStationId(): string | null;
  endStationId(optionalEncoding: flatbuffers.Encoding): string | Uint8Array | null;
  endStationId(optionalEncoding?: any): string | Uint8Array | null {
    const offset = this.bb!.__offset(this.bb_pos, 18);
    return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
  }

  startLat(): number {
    const offset = this.bb!.__offset(this.bb_pos, 20);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  startLng(): number {
    const offset = this.bb!.__offset(this.bb_pos, 22);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  endLat(): number {
    const offset = this.bb!.__offset(this.bb_pos, 24);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  endLng(): number {
    const offset = this.bb!.__offset(this.bb_pos, 26);
    return offset ? this.bb!.readFloat64(this.bb_pos + offset) : 0.0;
  }

  memberCasual(): MemberCasual {
    const offset = this.bb!.__offset(this.bb_pos, 28);
    return offset ? this.bb!.readInt8(this.bb_pos + offset) : MemberCasual.UNKNOWN_MEMBER_CASUAL;
  }

  static startTrip(builder: flatbuffers.Builder) {
    builder.startObject(13);
  }

  static addRideId(builder: flatbuffers.Builder, rideIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(0, rideIdOffset, 0);
  }

  static addRideableType(builder: flatbuffers.Builder, rideableType: RideableType) {
    builder.addFieldInt8(1, rideableType, RideableType.UNKNOWN_RIDEABLE_TYPE);
  }

  static addStartedAtMs(builder: flatbuffers.Builder, startedAtMs: bigint) {
    builder.addFieldInt64(2, startedAtMs, BigInt("0"));
  }

  static addEndedAtMs(builder: flatbuffers.Builder, endedAtMs: bigint) {
    builder.addFieldInt64(3, endedAtMs, BigInt("0"));
  }

  static addStartStationName(
    builder: flatbuffers.Builder,
    startStationNameOffset: flatbuffers.Offset,
  ) {
    builder.addFieldOffset(4, startStationNameOffset, 0);
  }

  static addStartStationId(builder: flatbuffers.Builder, startStationIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(5, startStationIdOffset, 0);
  }

  static addEndStationName(builder: flatbuffers.Builder, endStationNameOffset: flatbuffers.Offset) {
    builder.addFieldOffset(6, endStationNameOffset, 0);
  }

  static addEndStationId(builder: flatbuffers.Builder, endStationIdOffset: flatbuffers.Offset) {
    builder.addFieldOffset(7, endStationIdOffset, 0);
  }

  static addStartLat(builder: flatbuffers.Builder, startLat: number) {
    builder.addFieldFloat64(8, startLat, 0.0);
  }

  static addStartLng(builder: flatbuffers.Builder, startLng: number) {
    builder.addFieldFloat64(9, startLng, 0.0);
  }

  static addEndLat(builder: flatbuffers.Builder, endLat: number) {
    builder.addFieldFloat64(10, endLat, 0.0);
  }

  static addEndLng(builder: flatbuffers.Builder, endLng: number) {
    builder.addFieldFloat64(11, endLng, 0.0);
  }

  static addMemberCasual(builder: flatbuffers.Builder, memberCasual: MemberCasual) {
    builder.addFieldInt8(12, memberCasual, MemberCasual.UNKNOWN_MEMBER_CASUAL);
  }

  static endTrip(builder: flatbuffers.Builder): flatbuffers.Offset {
    const offset = builder.endObject();
    return offset;
  }

  static createTrip(
    builder: flatbuffers.Builder,
    rideIdOffset: flatbuffers.Offset,
    rideableType: RideableType,
    startedAtMs: bigint,
    endedAtMs: bigint,
    startStationNameOffset: flatbuffers.Offset,
    startStationIdOffset: flatbuffers.Offset,
    endStationNameOffset: flatbuffers.Offset,
    endStationIdOffset: flatbuffers.Offset,
    startLat: number,
    startLng: number,
    endLat: number,
    endLng: number,
    memberCasual: MemberCasual,
  ): flatbuffers.Offset {
    Trip.startTrip(builder);
    Trip.addRideId(builder, rideIdOffset);
    Trip.addRideableType(builder, rideableType);
    Trip.addStartedAtMs(builder, startedAtMs);
    Trip.addEndedAtMs(builder, endedAtMs);
    Trip.addStartStationName(builder, startStationNameOffset);
    Trip.addStartStationId(builder, startStationIdOffset);
    Trip.addEndStationName(builder, endStationNameOffset);
    Trip.addEndStationId(builder, endStationIdOffset);
    Trip.addStartLat(builder, startLat);
    Trip.addStartLng(builder, startLng);
    Trip.addEndLat(builder, endLat);
    Trip.addEndLng(builder, endLng);
    Trip.addMemberCasual(builder, memberCasual);
    return Trip.endTrip(builder);
  }
}
