// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from "flatbuffers";

import { Trip } from "./trip.js";

export class ServerResponseAll {
	bb: flatbuffers.ByteBuffer | null = null;
	bb_pos = 0;
	__init(i: number, bb: flatbuffers.ByteBuffer): ServerResponseAll {
		this.bb_pos = i;
		this.bb = bb;
		return this;
	}

	static getRootAsServerResponseAll(bb: flatbuffers.ByteBuffer, obj?: ServerResponseAll): ServerResponseAll {
		return (obj || new ServerResponseAll()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	}

	static getSizePrefixedRootAsServerResponseAll(
		bb: flatbuffers.ByteBuffer,
		obj?: ServerResponseAll,
	): ServerResponseAll {
		bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
		return (obj || new ServerResponseAll()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
	}

	trips(index: number, obj?: Trip): Trip | null {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset
			? (obj || new Trip()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!)
			: null;
	}

	tripsLength(): number {
		const offset = this.bb!.__offset(this.bb_pos, 4);
		return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
	}

	static startServerResponseAll(builder: flatbuffers.Builder) {
		builder.startObject(1);
	}

	static addTrips(builder: flatbuffers.Builder, tripsOffset: flatbuffers.Offset) {
		builder.addFieldOffset(0, tripsOffset, 0);
	}

	static createTripsVector(builder: flatbuffers.Builder, data: flatbuffers.Offset[]): flatbuffers.Offset {
		builder.startVector(4, data.length, 4);
		for (let i = data.length - 1; i >= 0; i--) {
			builder.addOffset(data[i]!);
		}
		return builder.endVector();
	}

	static startTripsVector(builder: flatbuffers.Builder, numElems: number) {
		builder.startVector(4, numElems, 4);
	}

	static endServerResponseAll(builder: flatbuffers.Builder): flatbuffers.Offset {
		const offset = builder.endObject();
		return offset;
	}

	static createServerResponseAll(builder: flatbuffers.Builder, tripsOffset: flatbuffers.Offset): flatbuffers.Offset {
		ServerResponseAll.startServerResponseAll(builder);
		ServerResponseAll.addTrips(builder, tripsOffset);
		return ServerResponseAll.endServerResponseAll(builder);
	}
}
